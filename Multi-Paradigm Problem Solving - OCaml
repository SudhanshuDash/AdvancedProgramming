(* Function to calculate mean *)
let mean lst =
  let sum = List.fold_left ( +. ) 0.0 lst in
  sum /. float_of_int (List.length lst)

(* Function to calculate median *)
let median lst =
  let sorted_lst = List.sort compare lst in
  let len = List.length sorted_lst in
  if len mod 2 = 0 then
    (List.nth sorted_lst (len / 2 - 1) +. List.nth sorted_lst (len / 2)) /. 2.0
  else
    List.nth sorted_lst (len / 2)

(* Function to calculate mode *)
let mode lst =
  let freq_map = List.fold_left
    (fun acc x -> 
      let count = try List.assoc x acc + 1 with Not_found -> 1 in
      (x, count) :: List.remove_assoc x acc)
    [] lst
  in
  fst (List.fold_left (fun (m, c) (k, v) -> if v > c then (k, v) else (m, c)) (List.hd lst, 0) freq_map)

(* Test data *)
let lst = [1.; 3.; 3.; 6.; 7.; 8.; 9.]

(* Output results *)
let () =
  Printf.printf "Mean: %.2f\n" (mean lst);
  Printf.printf "Median: %.2f\n" (median lst);
  Printf.printf "Mode: %.0f\n" (mode lst)
