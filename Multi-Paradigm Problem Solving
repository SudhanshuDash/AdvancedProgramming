
// Online C compiler to run C program online
#include <stdio.h>
#include <stdlib.h>

// Function to calculate mean
double calculate_mean(int arr[], int n) {
    int sum = 0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return (double)sum / n;
}

// Function to sort an array
void sort_array(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

// Function to calculate median
double calculate_median(int arr[], int n) {
    sort_array(arr, n);
    if (n % 2 == 0)
        return (arr[n / 2 - 1] + arr[n / 2]) / 2.0;
    else
        return arr[n / 2];
}

// Function to calculate mode
int calculate_mode(int arr[], int n) {
    int max_count = 0, mode = arr[0];
    for (int i = 0; i < n; i++) {
        int count = 0;
        for (int j = 0; j < n; j++) {
            if (arr[j] == arr[i])
                count++;
        }
        if (count > max_count) {
            max_count = count;
            mode = arr[i];
        }
    }
    return mode;
}

// Main function
int main() {
    int arr[] = {1, 3, 3, 6, 7, 8, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    printf("Mean: %.2f\n", calculate_mean(arr, n));
    printf("Median: %.2f\n", calculate_median(arr, n));
    printf("Mode: %d\n", calculate_mode(arr, n));

    return 0;
}

---------------------------------------------------

(* Function to calculate mean *)
let mean lst =
  let sum = List.fold_left ( +. ) 0.0 lst in
  sum /. float_of_int (List.length lst)

(* Function to calculate median *)
let median lst =
  let sorted_lst = List.sort compare lst in
  let len = List.length sorted_lst in
  if len mod 2 = 0 then
    (List.nth sorted_lst (len / 2 - 1) +. List.nth sorted_lst (len / 2)) /. 2.0
  else
    List.nth sorted_lst (len / 2)

(* Function to calculate mode *)
let mode lst =
  let freq_map = List.fold_left
    (fun acc x -> 
      let count = try List.assoc x acc + 1 with Not_found -> 1 in
      (x, count) :: List.remove_assoc x acc)
    [] lst
  in
  fst (List.fold_left (fun (m, c) (k, v) -> if v > c then (k, v) else (m, c)) (List.hd lst, 0) freq_map)

(* Test data *)
let lst = [1.; 3.; 3.; 6.; 7.; 8.; 9.]

(* Output results *)
let () =
  Printf.printf "Mean: %.2f\n" (mean lst);
  Printf.printf "Median: %.2f\n" (median lst);
  Printf.printf "Mode: %.0f\n" (mode lst)

--------------------------------------------------------------------------------------------

from collections import Counter

class StatisticsCalculator:
    def __init__(self, numbers):
        self.numbers = numbers

    def mean(self):
        return sum(self.numbers) / len(self.numbers)

    def median(self):
        sorted_nums = sorted(self.numbers)
        n = len(sorted_nums)
        mid = n // 2
        return (sorted_nums[mid] + sorted_nums[mid - 1]) / 2 if n % 2 == 0 else sorted_nums[mid]

    def mode(self):
        count = Counter(self.numbers)
        return max(count, key=count.get)

# Test
numbers = [1, 3, 3, 6, 7, 8, 9]
stats = StatisticsCalculator(numbers)

print(f"Mean: {stats.mean():.2f}")
print(f"Median: {stats.median():.2f}")
print(f"Mode: {stats.mode()}")
